"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/WTFCss/src/keywords/index.js
var keywords_exports = {};
__export(keywords_exports, {
  default: () => keywords_default,
  important: () => important_default,
  types: () => types_default
});
module.exports = __toCommonJS(keywords_exports);

// src/WTFCss/src/keywords/types.js
function getTypeKeyword(param = "") {
  switch (param) {
    case "absolute-size":
    case "alpha-value":
    case "angle":
    case "angle-percentage":
    case "basic-shape":
    case "blend-mode":
    case "box-edge":
    case "calc-constant":
    case "calc-sum":
    case "color-interpolation-method":
    case "color":
    case "custom-ident":
    case "dashed-ident":
    case "dimension":
    case "display-box":
    case "display-inside":
    case "display-internal":
    case "display-legacy":
    case "display-listitem":
    case "display-outside":
    case "easing-function":
    case "filter-function":
    case "flex":
    case "frequency":
    case "frequency-percentage":
    case "generic-family":
    case "gradient":
    case "hex-color":
    case "hue":
    case "hue-interpolation-method":
    case "ident":
    case "image":
    case "integer":
    case "length":
    case "length-percentage":
    case "line-style":
    case "named-color":
    case "number":
    case "overflow":
    case "percentage":
    case "position":
    case "ratio":
    case "relative-size":
    case "resolution":
    case "string":
    case "system-color":
    case "time":
    case "time-percentage":
    case "transform-function":
      return `<${param}>`;
    default:
      return null;
  }
}
var types_default = getTypeKeyword;

// src/WTFCss/src/keywords/important.js
var important = (_) => `!important;`;
var important_default = important;

// src/WTFCss/src/keywords/index.js
var keywords_default = {
  important: important_default,
  types: types_default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL1dURkNzcy9zcmMva2V5d29yZHMvaW5kZXguanMiLCAiLi4vLi4vLi4vc3JjL1dURkNzcy9zcmMva2V5d29yZHMvdHlwZXMuanMiLCAiLi4vLi4vLi4vc3JjL1dURkNzcy9zcmMva2V5d29yZHMvaW1wb3J0YW50LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZXMgZnJvbSAnLi90eXBlcy5qcyc7XG5cbmltcG9ydCBpbXBvcnRhbnQgZnJvbSAnLi9pbXBvcnRhbnQuanMnO1xuXG5leHBvcnQge1xuICBpbXBvcnRhbnQsXG4gIHR5cGVzLFxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGltcG9ydGFudCxcbiAgdHlwZXMsXG59IiwgIi8qKlxuICogUmV0cmlldmVzIHRoZSBjb3JyZXNwb25kaW5nIGtleXdvcmQgZm9yIGEgZ2l2ZW4gcGFyYW1ldGVyLlxuICogSWYgdGhlIGtleXdvcmQgaXMgZGVwcmVjYXRlZCBvciB1bmtub3duLCBhIHdhcm5pbmcgb3IgZXJyb3IgaXMgdGhyb3duLlxuIFxuICogQHBhcmFtIHtcbiAgICAnYWJzb2x1dGUtc2l6ZScgfFxuICAgICdhbHBoYS12YWx1ZScgfFxuICAgICdhbmdsZScgfFxuICAgICdhbmdsZS1wZXJjZW50YWdlJyB8XG4gICAgJ2Jhc2ljLXNoYXBlJyB8XG4gICAgJ2JsZW5kLW1vZGUnIHxcbiAgICAnYm94LWVkZ2UnIHxcbiAgICAnY2FsYy1jb25zdGFudCcgfFxuICAgICdjYWxjLXN1bScgfFxuICAgICdjb2xvci1pbnRlcnBvbGF0aW9uLW1ldGhvZCcgfFxuICAgICdjb2xvcicgfFxuICAgICdjdXN0b20taWRlbnQnIHxcbiAgICAnZGFzaGVkLWlkZW50JyB8XG4gICAgJ2RpbWVuc2lvbicgfFxuICAgICdkaXNwbGF5LWJveCcgfFxuICAgICdkaXNwbGF5LWluc2lkZScgfFxuICAgICdkaXNwbGF5LWludGVybmFsJyB8XG4gICAgJ2Rpc3BsYXktbGVnYWN5JyB8XG4gICAgJ2Rpc3BsYXktbGlzdGl0ZW0nIHxcbiAgICAnZGlzcGxheS1vdXRzaWRlJyB8XG4gICAgJ2Vhc2luZy1mdW5jdGlvbicgfFxuICAgICdmaWx0ZXItZnVuY3Rpb24nIHxcbiAgICAnZmxleCcgfFxuICAgICdmcmVxdWVuY3knIHxcbiAgICAnZnJlcXVlbmN5LXBlcmNlbnRhZ2UnIHxcbiAgICAnZ2VuZXJpYy1mYW1pbHknIHxcbiAgICAnZ3JhZGllbnQnIHxcbiAgICAnaGV4LWNvbG9yJyB8XG4gICAgJ2h1ZScgfFxuICAgICdodWUtaW50ZXJwb2xhdGlvbi1tZXRob2QnIHxcbiAgICAnaWRlbnQnIHxcbiAgICAnaW1hZ2UnIHxcbiAgICAnaW50ZWdlcicgfFxuICAgICdsZW5ndGgnIHxcbiAgICAnbGVuZ3RoLXBlcmNlbnRhZ2UnIHxcbiAgICAnbGluZS1zdHlsZScgfFxuICAgICduYW1lZC1jb2xvcicgfFxuICAgICdudW1iZXInIHxcbiAgICAnb3ZlcmZsb3cnIHxcbiAgICAncGVyY2VudGFnZScgfFxuICAgICdwb3NpdGlvbicgfFxuICAgICdyYXRpbycgfFxuICAgICdyZWxhdGl2ZS1zaXplJyB8XG4gICAgJ3Jlc29sdXRpb24nIHxcbiAgICAnc3RyaW5nJyB8XG4gICAgJ3N5c3RlbS1jb2xvcicgfFxuICAgICd0aW1lJyB8XG4gICAgJ3RpbWUtcGVyY2VudGFnZScgfFxuICAgICd0cmFuc2Zvcm0tZnVuY3Rpb24nXG4gIH0gcGFyYW0gLSBUaGUgcGFyYW1ldGVyIHRvIGdldCB0aGUga2V5d29yZCBmb3IuXG4gIFxuICogQHJldHVybnMge1xuICAgICc8YWJzb2x1dGUtc2l6ZT4nIHxcbiAgICAnPGFscGhhLXZhbHVlPicgfFxuICAgICc8YW5nbGU+JyB8XG4gICAgJzxhbmdsZS1wZXJjZW50YWdlPicgfFxuICAgICc8YmFzaWMtc2hhcGU+JyB8XG4gICAgJzxibGVuZC1tb2RlPicgfFxuICAgICc8Ym94LWVkZ2U+JyB8XG4gICAgJzxjYWxjLWNvbnN0YW50PicgfFxuICAgICc8Y2FsYy1zdW0+JyB8XG4gICAgJzxjb2xvci1pbnRlcnBvbGF0aW9uLW1ldGhvZD4nIHxcbiAgICAnPGNvbG9yPicgfFxuICAgICc8Y3VzdG9tLWlkZW50PicgfFxuICAgICc8ZGFzaGVkLWlkZW50PicgfFxuICAgICc8ZGltZW5zaW9uPicgfFxuICAgICc8ZGlzcGxheS1ib3g+JyB8XG4gICAgJzxkaXNwbGF5LWluc2lkZT4nIHxcbiAgICAnPGRpc3BsYXktaW50ZXJuYWw+JyB8XG4gICAgJzxkaXNwbGF5LWxlZ2FjeT4nIHxcbiAgICAnPGRpc3BsYXktbGlzdGl0ZW0+JyB8XG4gICAgJzxkaXNwbGF5LW91dHNpZGU+JyB8XG4gICAgJzxlYXNpbmctZnVuY3Rpb24+JyB8XG4gICAgJzxmaWx0ZXItZnVuY3Rpb24+JyB8XG4gICAgJzxmbGV4PicgfFxuICAgICc8ZnJlcXVlbmN5PicgfFxuICAgICc8ZnJlcXVlbmN5LXBlcmNlbnRhZ2U+JyB8XG4gICAgJzxnZW5lcmljLWZhbWlseT4nIHxcbiAgICAnPGdyYWRpZW50PicgfFxuICAgICc8aGV4LWNvbG9yPicgfFxuICAgICc8aHVlPicgfFxuICAgICc8aHVlLWludGVycG9sYXRpb24tbWV0aG9kPicgfFxuICAgICc8aWRlbnQ+JyB8XG4gICAgJzxpbWFnZT4nIHxcbiAgICAnPGludGVnZXI+JyB8XG4gICAgJzxsZW5ndGg+JyB8XG4gICAgJzxsZW5ndGgtcGVyY2VudGFnZT4nIHxcbiAgICAnPGxpbmUtc3R5bGU+JyB8XG4gICAgJzxuYW1lZC1jb2xvcj4nIHxcbiAgICAnPG51bWJlcj4nIHxcbiAgICAnPG92ZXJmbG93PicgfFxuICAgICc8cGVyY2VudGFnZT4nIHxcbiAgICAnPHBvc2l0aW9uPicgfFxuICAgICc8cmF0aW8+JyB8XG4gICAgJzxyZWxhdGl2ZS1zaXplPicgfFxuICAgICc8cmVzb2x1dGlvbj4nIHxcbiAgICAnPHN0cmluZz4nIHxcbiAgICAnPHN5c3RlbS1jb2xvcj4nIHxcbiAgICAnPHRpbWU+JyB8XG4gICAgJzx0aW1lLXBlcmNlbnRhZ2U+JyB8XG4gICAgJzx0cmFuc2Zvcm0tZnVuY3Rpb24+J1xuICB9IFRoZSBjb3JyZXNwb25kaW5nIGtleXdvcmQgYXMgYSBcXDxrZXl3b3JkXFw+LlxuICovXG5mdW5jdGlvbiBnZXRUeXBlS2V5d29yZChwYXJhbSA9ICcnKSB7XG4gIHN3aXRjaCAocGFyYW0pIHtcbiAgICBjYXNlICdhYnNvbHV0ZS1zaXplJzpcbiAgICBjYXNlICdhbHBoYS12YWx1ZSc6XG4gICAgY2FzZSAnYW5nbGUnOlxuICAgIGNhc2UgJ2FuZ2xlLXBlcmNlbnRhZ2UnOlxuICAgIGNhc2UgJ2Jhc2ljLXNoYXBlJzpcbiAgICBjYXNlICdibGVuZC1tb2RlJzpcbiAgICBjYXNlICdib3gtZWRnZSc6XG4gICAgY2FzZSAnY2FsYy1jb25zdGFudCc6XG4gICAgY2FzZSAnY2FsYy1zdW0nOlxuICAgIGNhc2UgJ2NvbG9yLWludGVycG9sYXRpb24tbWV0aG9kJzpcbiAgICBjYXNlICdjb2xvcic6XG4gICAgY2FzZSAnY3VzdG9tLWlkZW50JzpcbiAgICBjYXNlICdkYXNoZWQtaWRlbnQnOlxuICAgIGNhc2UgJ2RpbWVuc2lvbic6XG4gICAgY2FzZSAnZGlzcGxheS1ib3gnOlxuICAgIGNhc2UgJ2Rpc3BsYXktaW5zaWRlJzpcbiAgICBjYXNlICdkaXNwbGF5LWludGVybmFsJzpcbiAgICBjYXNlICdkaXNwbGF5LWxlZ2FjeSc6XG4gICAgY2FzZSAnZGlzcGxheS1saXN0aXRlbSc6XG4gICAgY2FzZSAnZGlzcGxheS1vdXRzaWRlJzpcbiAgICBjYXNlICdlYXNpbmctZnVuY3Rpb24nOlxuICAgIGNhc2UgJ2ZpbHRlci1mdW5jdGlvbic6XG4gICAgY2FzZSAnZmxleCc6XG4gICAgY2FzZSAnZnJlcXVlbmN5JzpcbiAgICBjYXNlICdmcmVxdWVuY3ktcGVyY2VudGFnZSc6XG4gICAgY2FzZSAnZ2VuZXJpYy1mYW1pbHknOlxuICAgIGNhc2UgJ2dyYWRpZW50JzpcbiAgICBjYXNlICdoZXgtY29sb3InOlxuICAgIGNhc2UgJ2h1ZSc6XG4gICAgY2FzZSAnaHVlLWludGVycG9sYXRpb24tbWV0aG9kJzpcbiAgICBjYXNlICdpZGVudCc6XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgIGNhc2UgJ2ludGVnZXInOlxuICAgIGNhc2UgJ2xlbmd0aCc6XG4gICAgY2FzZSAnbGVuZ3RoLXBlcmNlbnRhZ2UnOlxuICAgIGNhc2UgJ2xpbmUtc3R5bGUnOlxuICAgIGNhc2UgJ25hbWVkLWNvbG9yJzpcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ292ZXJmbG93JzpcbiAgICBjYXNlICdwZXJjZW50YWdlJzpcbiAgICBjYXNlICdwb3NpdGlvbic6XG4gICAgY2FzZSAncmF0aW8nOlxuICAgIGNhc2UgJ3JlbGF0aXZlLXNpemUnOlxuICAgIGNhc2UgJ3Jlc29sdXRpb24nOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnc3lzdGVtLWNvbG9yJzpcbiAgICBjYXNlICd0aW1lJzpcbiAgICBjYXNlICd0aW1lLXBlcmNlbnRhZ2UnOlxuICAgIGNhc2UgJ3RyYW5zZm9ybS1mdW5jdGlvbic6XG4gICAgICByZXR1cm4gYDwke3BhcmFtfT5gO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFR5cGVLZXl3b3JkOyIsICJleHBvcnQgY29uc3QgaW1wb3J0YW50ID0gXyA9PiBgIWltcG9ydGFudDtgXG5leHBvcnQgZGVmYXVsdCBpbXBvcnRhbnQiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUM0R0EsU0FBUyxlQUFlLFFBQVEsSUFBSTtBQUNsQyxVQUFRLE9BQU87QUFBQSxJQUNiLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFDSCxhQUFPLElBQUksS0FBSztBQUFBLElBRWxCO0FBQ0UsYUFBTztBQUFBLEVBQ1g7QUFDRjtBQUVBLElBQU8sZ0JBQVE7OztBQ3RLUixJQUFNLFlBQVksT0FBSztBQUM5QixJQUFPLG9CQUFROzs7QUZRZixJQUFPLG1CQUFRO0FBQUEsRUFDYjtBQUFBLEVBQ0E7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K