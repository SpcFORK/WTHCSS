// src/WTFCss/src/keywords/types.js
function getTypeKeyword(param = "") {
  switch (param) {
    case "absolute-size":
    case "alpha-value":
    case "angle":
    case "angle-percentage":
    case "basic-shape":
    case "blend-mode":
    case "box-edge":
    case "calc-constant":
    case "calc-sum":
    case "color-interpolation-method":
    case "color":
    case "custom-ident":
    case "dashed-ident":
    case "dimension":
    case "display-box":
    case "display-inside":
    case "display-internal":
    case "display-legacy":
    case "display-listitem":
    case "display-outside":
    case "easing-function":
    case "filter-function":
    case "flex":
    case "frequency":
    case "frequency-percentage":
    case "generic-family":
    case "gradient":
    case "hex-color":
    case "hue":
    case "hue-interpolation-method":
    case "ident":
    case "image":
    case "integer":
    case "length":
    case "length-percentage":
    case "line-style":
    case "named-color":
    case "number":
    case "overflow":
    case "percentage":
    case "position":
    case "ratio":
    case "relative-size":
    case "resolution":
    case "string":
    case "system-color":
    case "time":
    case "time-percentage":
    case "transform-function":
      return `<${param}>`;
    default:
      return null;
  }
}
var types_default = getTypeKeyword;

// src/WTFCss/src/keywords/important.js
var important = (_) => `!important;`;
var important_default = important;

// src/WTFCss/src/keywords/index.js
var keywords_default = {
  important: important_default,
  types: types_default
};
export {
  keywords_default as default,
  important_default as important,
  types_default as types
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL1dURkNzcy9zcmMva2V5d29yZHMvdHlwZXMuanMiLCAiLi4vLi4vLi4vc3JjL1dURkNzcy9zcmMva2V5d29yZHMvaW1wb3J0YW50LmpzIiwgIi4uLy4uLy4uL3NyYy9XVEZDc3Mvc3JjL2tleXdvcmRzL2luZGV4LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIFJldHJpZXZlcyB0aGUgY29ycmVzcG9uZGluZyBrZXl3b3JkIGZvciBhIGdpdmVuIHBhcmFtZXRlci5cbiAqIElmIHRoZSBrZXl3b3JkIGlzIGRlcHJlY2F0ZWQgb3IgdW5rbm93biwgYSB3YXJuaW5nIG9yIGVycm9yIGlzIHRocm93bi5cbiBcbiAqIEBwYXJhbSB7XG4gICAgJ2Fic29sdXRlLXNpemUnIHxcbiAgICAnYWxwaGEtdmFsdWUnIHxcbiAgICAnYW5nbGUnIHxcbiAgICAnYW5nbGUtcGVyY2VudGFnZScgfFxuICAgICdiYXNpYy1zaGFwZScgfFxuICAgICdibGVuZC1tb2RlJyB8XG4gICAgJ2JveC1lZGdlJyB8XG4gICAgJ2NhbGMtY29uc3RhbnQnIHxcbiAgICAnY2FsYy1zdW0nIHxcbiAgICAnY29sb3ItaW50ZXJwb2xhdGlvbi1tZXRob2QnIHxcbiAgICAnY29sb3InIHxcbiAgICAnY3VzdG9tLWlkZW50JyB8XG4gICAgJ2Rhc2hlZC1pZGVudCcgfFxuICAgICdkaW1lbnNpb24nIHxcbiAgICAnZGlzcGxheS1ib3gnIHxcbiAgICAnZGlzcGxheS1pbnNpZGUnIHxcbiAgICAnZGlzcGxheS1pbnRlcm5hbCcgfFxuICAgICdkaXNwbGF5LWxlZ2FjeScgfFxuICAgICdkaXNwbGF5LWxpc3RpdGVtJyB8XG4gICAgJ2Rpc3BsYXktb3V0c2lkZScgfFxuICAgICdlYXNpbmctZnVuY3Rpb24nIHxcbiAgICAnZmlsdGVyLWZ1bmN0aW9uJyB8XG4gICAgJ2ZsZXgnIHxcbiAgICAnZnJlcXVlbmN5JyB8XG4gICAgJ2ZyZXF1ZW5jeS1wZXJjZW50YWdlJyB8XG4gICAgJ2dlbmVyaWMtZmFtaWx5JyB8XG4gICAgJ2dyYWRpZW50JyB8XG4gICAgJ2hleC1jb2xvcicgfFxuICAgICdodWUnIHxcbiAgICAnaHVlLWludGVycG9sYXRpb24tbWV0aG9kJyB8XG4gICAgJ2lkZW50JyB8XG4gICAgJ2ltYWdlJyB8XG4gICAgJ2ludGVnZXInIHxcbiAgICAnbGVuZ3RoJyB8XG4gICAgJ2xlbmd0aC1wZXJjZW50YWdlJyB8XG4gICAgJ2xpbmUtc3R5bGUnIHxcbiAgICAnbmFtZWQtY29sb3InIHxcbiAgICAnbnVtYmVyJyB8XG4gICAgJ292ZXJmbG93JyB8XG4gICAgJ3BlcmNlbnRhZ2UnIHxcbiAgICAncG9zaXRpb24nIHxcbiAgICAncmF0aW8nIHxcbiAgICAncmVsYXRpdmUtc2l6ZScgfFxuICAgICdyZXNvbHV0aW9uJyB8XG4gICAgJ3N0cmluZycgfFxuICAgICdzeXN0ZW0tY29sb3InIHxcbiAgICAndGltZScgfFxuICAgICd0aW1lLXBlcmNlbnRhZ2UnIHxcbiAgICAndHJhbnNmb3JtLWZ1bmN0aW9uJ1xuICB9IHBhcmFtIC0gVGhlIHBhcmFtZXRlciB0byBnZXQgdGhlIGtleXdvcmQgZm9yLlxuICBcbiAqIEByZXR1cm5zIHtcbiAgICAnPGFic29sdXRlLXNpemU+JyB8XG4gICAgJzxhbHBoYS12YWx1ZT4nIHxcbiAgICAnPGFuZ2xlPicgfFxuICAgICc8YW5nbGUtcGVyY2VudGFnZT4nIHxcbiAgICAnPGJhc2ljLXNoYXBlPicgfFxuICAgICc8YmxlbmQtbW9kZT4nIHxcbiAgICAnPGJveC1lZGdlPicgfFxuICAgICc8Y2FsYy1jb25zdGFudD4nIHxcbiAgICAnPGNhbGMtc3VtPicgfFxuICAgICc8Y29sb3ItaW50ZXJwb2xhdGlvbi1tZXRob2Q+JyB8XG4gICAgJzxjb2xvcj4nIHxcbiAgICAnPGN1c3RvbS1pZGVudD4nIHxcbiAgICAnPGRhc2hlZC1pZGVudD4nIHxcbiAgICAnPGRpbWVuc2lvbj4nIHxcbiAgICAnPGRpc3BsYXktYm94PicgfFxuICAgICc8ZGlzcGxheS1pbnNpZGU+JyB8XG4gICAgJzxkaXNwbGF5LWludGVybmFsPicgfFxuICAgICc8ZGlzcGxheS1sZWdhY3k+JyB8XG4gICAgJzxkaXNwbGF5LWxpc3RpdGVtPicgfFxuICAgICc8ZGlzcGxheS1vdXRzaWRlPicgfFxuICAgICc8ZWFzaW5nLWZ1bmN0aW9uPicgfFxuICAgICc8ZmlsdGVyLWZ1bmN0aW9uPicgfFxuICAgICc8ZmxleD4nIHxcbiAgICAnPGZyZXF1ZW5jeT4nIHxcbiAgICAnPGZyZXF1ZW5jeS1wZXJjZW50YWdlPicgfFxuICAgICc8Z2VuZXJpYy1mYW1pbHk+JyB8XG4gICAgJzxncmFkaWVudD4nIHxcbiAgICAnPGhleC1jb2xvcj4nIHxcbiAgICAnPGh1ZT4nIHxcbiAgICAnPGh1ZS1pbnRlcnBvbGF0aW9uLW1ldGhvZD4nIHxcbiAgICAnPGlkZW50PicgfFxuICAgICc8aW1hZ2U+JyB8XG4gICAgJzxpbnRlZ2VyPicgfFxuICAgICc8bGVuZ3RoPicgfFxuICAgICc8bGVuZ3RoLXBlcmNlbnRhZ2U+JyB8XG4gICAgJzxsaW5lLXN0eWxlPicgfFxuICAgICc8bmFtZWQtY29sb3I+JyB8XG4gICAgJzxudW1iZXI+JyB8XG4gICAgJzxvdmVyZmxvdz4nIHxcbiAgICAnPHBlcmNlbnRhZ2U+JyB8XG4gICAgJzxwb3NpdGlvbj4nIHxcbiAgICAnPHJhdGlvPicgfFxuICAgICc8cmVsYXRpdmUtc2l6ZT4nIHxcbiAgICAnPHJlc29sdXRpb24+JyB8XG4gICAgJzxzdHJpbmc+JyB8XG4gICAgJzxzeXN0ZW0tY29sb3I+JyB8XG4gICAgJzx0aW1lPicgfFxuICAgICc8dGltZS1wZXJjZW50YWdlPicgfFxuICAgICc8dHJhbnNmb3JtLWZ1bmN0aW9uPidcbiAgfSBUaGUgY29ycmVzcG9uZGluZyBrZXl3b3JkIGFzIGEgXFw8a2V5d29yZFxcPi5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZUtleXdvcmQocGFyYW0gPSAnJykge1xuICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgY2FzZSAnYWJzb2x1dGUtc2l6ZSc6XG4gICAgY2FzZSAnYWxwaGEtdmFsdWUnOlxuICAgIGNhc2UgJ2FuZ2xlJzpcbiAgICBjYXNlICdhbmdsZS1wZXJjZW50YWdlJzpcbiAgICBjYXNlICdiYXNpYy1zaGFwZSc6XG4gICAgY2FzZSAnYmxlbmQtbW9kZSc6XG4gICAgY2FzZSAnYm94LWVkZ2UnOlxuICAgIGNhc2UgJ2NhbGMtY29uc3RhbnQnOlxuICAgIGNhc2UgJ2NhbGMtc3VtJzpcbiAgICBjYXNlICdjb2xvci1pbnRlcnBvbGF0aW9uLW1ldGhvZCc6XG4gICAgY2FzZSAnY29sb3InOlxuICAgIGNhc2UgJ2N1c3RvbS1pZGVudCc6XG4gICAgY2FzZSAnZGFzaGVkLWlkZW50JzpcbiAgICBjYXNlICdkaW1lbnNpb24nOlxuICAgIGNhc2UgJ2Rpc3BsYXktYm94JzpcbiAgICBjYXNlICdkaXNwbGF5LWluc2lkZSc6XG4gICAgY2FzZSAnZGlzcGxheS1pbnRlcm5hbCc6XG4gICAgY2FzZSAnZGlzcGxheS1sZWdhY3knOlxuICAgIGNhc2UgJ2Rpc3BsYXktbGlzdGl0ZW0nOlxuICAgIGNhc2UgJ2Rpc3BsYXktb3V0c2lkZSc6XG4gICAgY2FzZSAnZWFzaW5nLWZ1bmN0aW9uJzpcbiAgICBjYXNlICdmaWx0ZXItZnVuY3Rpb24nOlxuICAgIGNhc2UgJ2ZsZXgnOlxuICAgIGNhc2UgJ2ZyZXF1ZW5jeSc6XG4gICAgY2FzZSAnZnJlcXVlbmN5LXBlcmNlbnRhZ2UnOlxuICAgIGNhc2UgJ2dlbmVyaWMtZmFtaWx5JzpcbiAgICBjYXNlICdncmFkaWVudCc6XG4gICAgY2FzZSAnaGV4LWNvbG9yJzpcbiAgICBjYXNlICdodWUnOlxuICAgIGNhc2UgJ2h1ZS1pbnRlcnBvbGF0aW9uLW1ldGhvZCc6XG4gICAgY2FzZSAnaWRlbnQnOlxuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICBjYXNlICdsZW5ndGgnOlxuICAgIGNhc2UgJ2xlbmd0aC1wZXJjZW50YWdlJzpcbiAgICBjYXNlICdsaW5lLXN0eWxlJzpcbiAgICBjYXNlICduYW1lZC1jb2xvcic6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdvdmVyZmxvdyc6XG4gICAgY2FzZSAncGVyY2VudGFnZSc6XG4gICAgY2FzZSAncG9zaXRpb24nOlxuICAgIGNhc2UgJ3JhdGlvJzpcbiAgICBjYXNlICdyZWxhdGl2ZS1zaXplJzpcbiAgICBjYXNlICdyZXNvbHV0aW9uJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ3N5c3RlbS1jb2xvcic6XG4gICAgY2FzZSAndGltZSc6XG4gICAgY2FzZSAndGltZS1wZXJjZW50YWdlJzpcbiAgICBjYXNlICd0cmFuc2Zvcm0tZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGA8JHtwYXJhbX0+YDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRUeXBlS2V5d29yZDsiLCAiZXhwb3J0IGNvbnN0IGltcG9ydGFudCA9IF8gPT4gYCFpbXBvcnRhbnQ7YFxuZXhwb3J0IGRlZmF1bHQgaW1wb3J0YW50IiwgImltcG9ydCB0eXBlcyBmcm9tICcuL3R5cGVzLmpzJztcblxuaW1wb3J0IGltcG9ydGFudCBmcm9tICcuL2ltcG9ydGFudC5qcyc7XG5cbmV4cG9ydCB7XG4gIGltcG9ydGFudCxcbiAgdHlwZXMsXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW1wb3J0YW50LFxuICB0eXBlcyxcbn0iXSwKICAibWFwcGluZ3MiOiAiO0FBNEdBLFNBQVMsZUFBZSxRQUFRLElBQUk7QUFDbEMsVUFBUSxPQUFPO0FBQUEsSUFDYixLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQUEsSUFDTCxLQUFLO0FBQ0gsYUFBTyxJQUFJLEtBQUs7QUFBQSxJQUVsQjtBQUNFLGFBQU87QUFBQSxFQUNYO0FBQ0Y7QUFFQSxJQUFPLGdCQUFROzs7QUN0S1IsSUFBTSxZQUFZLE9BQUs7QUFDOUIsSUFBTyxvQkFBUTs7O0FDUWYsSUFBTyxtQkFBUTtBQUFBLEVBQ2I7QUFBQSxFQUNBO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==