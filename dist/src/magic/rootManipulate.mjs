// src/WTFCss/src/functions/var.js
var cssVar = (name, fallback) => {
  if (typeof name !== "string") {
    throw new Error("The custom property name must be a string.");
  }
  if (fallback !== void 0 && typeof fallback !== "string") {
    throw new Error("The fallback value must be a string.");
  }
  return `var(${name}${fallback !== void 0 ? `, ${fallback}` : ""})`;
};

// src/WTFCss/src/magic/rootManipulate.js
var Anoop = async () => {
};
var getRoot = (_) => document.documentElement;
var getRootStyle = (_) => window.getComputedStyle(getRoot());
var getRootStyleProperty = (property) => getRootStyle().getPropertyValue(property);
var getRootStylePropertyWithFallback = async (property, fallbackFn = Anoop) => {
  let rs = getRootStyle();
  return rs.getPropertyValue(property) || await fallbackFn(rs);
};
var setRootProp = (property, value) => {
  const root = getRoot();
  root.style.setProperty(property, value);
};
var deleteRootProp = (property) => {
  const root = getRoot();
  root.style.removeProperty(property);
};
var setRootVar = (property, value) => {
  setRootProp(`--${property}`, value);
};
var deleteRootVar = (property) => {
  deleteRootProp(`--${property}`);
};
var getRootVar = (property) => getRootStyleProperty(`--${property}`);
var setCSSProp = (element, property, value) => window.getComputedStyle(element).setProperty(property, value);
var deleteCSSProp = (element, property) => window.getComputedStyle(element).removeProperty(property);
var getCSSProp = (element, property) => window.getComputedStyle(element).getPropertyValue(property);
var getCSSVar = (element, property) => getCSSProp(element, `--${property}`);
var setCSSVar = (element, property, value) => setCSSProp(element, `--${property}`, value);
var deleteCSSVar = (element, property) => deleteCSSProp(element, `--${property}`);
var runningCSS_Evals = 0;
var evalCSSProp = (css) => {
  const name = "eval-css-" + runningCSS_Evals;
  ++runningCSS_Evals;
  setRootVar(name, css);
  let res = getRootVar(name);
  --runningCSS_Evals;
  deleteRootVar(name);
  return res;
};
var evalCSSHard = (rule, css) => CSSStyleValue.parse(rule, css);
var createCounter = (element, property, var_) => {
  element.style.setProperty(property, `counter(${var_})`);
  element.style.setProperty("counter-reset", `${var_} ${cssVar(var_)}`);
  return element.style.getPropertyValue(property);
};
var createProperty = (name, data = {}, inherits = false) => {
  let isFF = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
  if (!isFF) {
    CSS.registerProperty({
      name,
      syntax: data?.syntax || "<color>",
      inherits: inherits || false,
      initialValue: data?.initialValue || "#c0ffee"
    });
  } else {
    setRootVar(name, data?.initialValue || "#c0ffee");
  }
};
var rootManipulate_default = {
  getRoot,
  getRootStyle,
  getRootStyleProperty,
  getRootStylePropertyWithFallback,
  setRootProp,
  deleteRootProp,
  setRootVar,
  deleteRootVar,
  getRootVar,
  setCSSProp,
  deleteCSSProp,
  getCSSProp,
  getCSSVar,
  setCSSVar,
  deleteCSSVar,
  evalCSSProp,
  evalCSSHard,
  createProperty,
  createCounter
};
export {
  rootManipulate_default as default
};
//# sourceMappingURL=data:application/json;base64,